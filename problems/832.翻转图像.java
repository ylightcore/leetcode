/*
 * @lc app=leetcode.cn id=832 lang=java
 *
 * [832] 翻转图像
 *
 * https://leetcode-cn.com/problems/flipping-an-image/description/
 *
 * algorithms
 * Easy (75.68%)
 * Likes:    237
 * Dislikes: 0
 * Total Accepted:    69K
 * Total Submissions: 86.9K
 * Testcase Example:  '[[1,1,0],[1,0,1],[0,0,0]]'
 *
 * 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。
 * 
 * 水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。
 * 
 * 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：[[1,1,0],[1,0,1],[0,0,0]]
 * 输出：[[1,0,0],[0,1,0],[1,1,1]]
 * 解释：首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
 * ⁠    然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
 * 
 * 
 * 示例 2：
 * 
 * 
 * 输入：[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
 * 输出：[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
 * 解释：首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
 * ⁠    然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * 1 
 * 0 
 * 
 * 
 */

/* 解题思路
 * 遍历一半的列，内部遍历所有行
 * 如果A[i]==A[N-i-1]，翻转再反转以后值不变，无需处理
 * 否则，两个数取反
 * 当i==N-i-1时，需要特殊处理，否则取反两次将没有变化
 */

// @lc code=start
class Solution {
    public int[][] flipAndInvertImage(int[][] A) {
        int N = A.length;
        for (int i = 0; i < (N + 1) / 2; i++) {
            int l = i, r = N - i - 1;
            if (l == r) {
                for (int j = 0; j < N; j++) {
                    A[j][i] ^= 1;
                }
            } else {
                for (int j = 0; j < N; j++) {
                    if (A[j][l] == A[j][r]) {
                        A[j][l] ^= 1;
                        A[j][r] ^= 1;
                    }
                }
            }
        }
        return A;
    }
}
// @lc code=end
